import { ActionIcon, Skeleton, Text, Title, Tooltip } from '@mantine/core';
import { IconRefresh } from '@tabler/icons-react';
import { useSelector } from 'react-redux';
import { RenderCards, ScrollToTopButton, Sort } from '../../components';
import { useFetchPosts, useSearchPosts } from '../../hooks';
import { setPosts } from '../../redux/slices';
import { RootState } from '../../redux/store';
import { SearchPostsInput } from '../components';

export const HomePage = () => {
  const posts = useSelector((state: RootState) => state.posts.allPosts);

  const { fetchPosts, loading } = useFetchPosts();
  const { searchText, searchedPosts, handleSearchChange, resetSearch } = useSearchPosts(posts, true);

  return (
    <section className='mx-auto max-w-7xl'>
      <div className='flex flex-col items-start justify-between gap-5 md:flex-row'>
        <div>
          <Title order={1}>The Community Showcase</Title>

          <Text className='mt-2 max-w-[500px] opacity-60'>
            Browse through a collection of imaginative and visually stunning images generated by AI
          </Text>
        </div>
      </div>

      {loading ? (
        <Skeleton radius='md' height={42} className='mt-14' />
      ) : (
        !!posts.length && (
          <div className='mt-8 flex items-end gap-x-2'>
            <SearchPostsInput
              placeholder='Enter prompt or username'
              loading={loading}
              searchText={searchText}
              handleSearchChange={handleSearchChange}
              resetSearch={resetSearch}
            />

            <Tooltip label='Refresh posts' withArrow>
              <ActionIcon
                size={42}
                color='violet'
                radius='md'
                onClick={fetchPosts}
                loading={loading}
                aria-label='Refresh'
              >
                <IconRefresh size={20} />
              </ActionIcon>
            </Tooltip>

            <Sort posts={searchText ? searchedPosts : posts} setPosts={setPosts} />
          </div>
        )
      )}

      <div className='mt-3'>
        {searchText && (
          <Title className='mb-3 font-medium' order={2} size={'h3'}>
            <span className='opacity-60'>Showing results for</span> <span className='opacity-100'>{searchText}</span>
          </Title>
        )}

        <RenderCards title='No posts found' posts={searchText ? searchedPosts : posts} loading={loading} />
      </div>

      <ScrollToTopButton />
    </section>
  );
};
