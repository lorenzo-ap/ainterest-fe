import { ActionIcon, Button, CloseButton, Text, TextInput, Title, Tooltip } from '@mantine/core';
import { IconPhotoAi, IconRefresh } from '@tabler/icons-react';
import { useState } from 'react';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import useFetchPosts from '../../hooks/useFetchPosts';
import { RootState } from '../../redux/store';
import { Post } from '../../types/post.interface';
import RenderCards from './components/RenderCards';

const Home = () => {
  const [searchText, setSearchText] = useState<string>('');
  const [searchedPosts, setSearchedPosts] = useState<Post[]>([]);

  const { isLoading, fetchPosts } = useFetchPosts();

  const posts = useSelector((state: RootState) => state.posts);
  const user = useSelector((state: RootState) => state.user);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;

    if (!value.trim()) {
      setSearchText('');
      return;
    }

    setSearchText(value);

    const searchResults = posts.filter(
      (post) =>
        post.user.username.toLowerCase().includes(value.trim().toLowerCase()) ||
        post.prompt.toLowerCase().includes(value.trim().toLowerCase())
    );

    setSearchedPosts(searchResults);
  };

  return (
    <section className='mx-auto max-w-7xl'>
      <div className='flex flex-col items-start justify-between gap-5 md:flex-row'>
        <div>
          <Title order={1}>The Community Showcase</Title>

          <Text className='mt-2 max-w-[500px] opacity-60'>
            Browse through a collection of imaginative and visually stunning images generated by AI
          </Text>
        </div>

        {user && (
          <Button
            component={Link}
            to='/generate-image'
            color='violet'
            size='lg'
            rightSection={<IconPhotoAi size={20} />}
          >
            Generate image
          </Button>
        )}
      </div>

      <div className='mt-8 flex items-end gap-x-2 md:mt-16'>
        <TextInput
          flex={1}
          size='md'
          radius='md'
          label='Search posts'
          placeholder='Enter name or prompt'
          value={searchText}
          onChange={handleSearchChange}
          rightSection={
            searchText && (
              <Tooltip withArrow label='Clear'>
                <CloseButton onClick={() => setSearchText('')} />
              </Tooltip>
            )
          }
        />

        <Tooltip label='Refresh posts' withArrow>
          <ActionIcon
            size={42}
            color='violet'
            radius='md'
            onClick={fetchPosts}
            loading={isLoading}
            aria-label='Refresh'
          >
            <IconRefresh size={18} />
          </ActionIcon>
        </Tooltip>
      </div>

      <div className='mt-5'>
        {searchText && (
          <Title className='mb-3 font-medium' order={2} size={'h3'}>
            <span className='opacity-60'>Showing results for</span> <span className='opacity-100'>{searchText}</span>
          </Title>
        )}

        <div className='grid grid-cols-1 gap-3 xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4'>
          {searchText ? (
            <RenderCards posts={searchedPosts} title='No search results found' isLoading={isLoading} />
          ) : (
            <RenderCards posts={posts} title='No posts found' isLoading={isLoading} />
          )}
        </div>
      </div>
    </section>
  );
};

export default Home;
